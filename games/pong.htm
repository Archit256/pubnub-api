<!doctype html>
<html>
<head>
    <title>PubNub - Pong</title>
    <meta name=viewport content='width=device-width, height=device-height, user-scalable=0' />
    <meta name=apple-mobile-web-app-capable content=yes>
    <meta name=apple-mobile-web-app-status-bar-style content=black-translucent>
    <style>
        body {
            overflow: hidden;
            height: 100%;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            -webkit-text-size-adjust: none;
            background-color: #333;
            margin: 0;
            padding: 0;
        }
        #screen {
            position: absolute;
            width: 480px;
            height: 320px; 
            overflow: hidden;
            margin-top: -160px;
            margin-left: -240px;
            top: 50%;
            left: 50%;
            background: #fff;
            cursor: crosshair;
        }
        #painter {
            width: 480px;
            height: 320px; 
            position: relative;
            overflow: hidden;
        }
    </style>
</head>
<body>
<div id=screen><div id=painter></div></div>
</body>
</html>
<script src=/js-api?pub-key=demo&sub-key=demo&devmode=true&modules=utility,sprite,player></script>
<script>(function(){

/*
    - TODO -
    -make sprite ball
        -have it bounce around the stage.
        -
    -make players
        -some puck graphic
        -can hit ball
        -
*/

var PUB     = PUBNUB
,   $       = PUB.$
,   bind    = PUB.bind
,   css     = PUB.css
,   each    = PUB.each
,   create  = PUB.create
,   sprite  = PUB.sprite
,   utility = PUB.utility
,   updater = utility.updater
,   player  = PUB.player
,   players = player.players
,   mouse   = utility.mouse
,   painter = $('painter')
,   channel = 'pong'
,   wait    = 100
,   stage   = { width : 480, height : 320 };

// Set Relative Painter Node
sprite.painter(painter);

// Create Current Player and Ball
var current_player = player.current_player()
,   ball           = sprite.create({
        image : {
            url    : '',
            width  : 10,
            height : 10,
            offset : {
                top  : 0,
                left : 0
            }
        },
        cell : {
            count : 1
        },
        left : stage.width  / 2,
        top  : stage.height / 2,
        framerate : 60
});

// Setup Current Player
current_player.sprite = sprite.create({
    image : {
        url    : '',
        width  : 7,
        height : 20,
        offset : {
            top  : 0,
            left : 0
        }
    },
    cell : {
        count : 1
    },
    left : 0,
    top  : 0,
    framerate : 60
});
css( current_player.sprite.node, { 'backgroundColor' : '#00f' } );


// Setup Ball
css( ball.node, { 'backgroundColor' : '#f00' } );
ball.state = {
    x_vel     : 20,
    y_vel     : 20,
    min_x_vel : 15,
    min_y_vel : 15,
    duration  : wait
};


// Ball Animation Loop
function animate_ball() {
    // Reduce to Min Speed Slowly
    if (ball.state.x_vel > ball.state.min_x_vel) ball.state.x_vel--;
    if (ball.state.y_vel > ball.state.min_y_vel) ball.state.y_vel--;

    // Stage Bounding
    if (ball.top + 15 > stage.width || ball.top < 15)
        ball.state.x_vel *= -1;
    if (ball.left + 15 > stage.height || ball.left < 15)
        ball.state.y_vel *= -1;

    // Animate for ball.state.duration duration.
    sprite.move( ball, {
        top  : ball.top  + ball.state.y_vel,
        left : ball.left + ball.state.x_vel
    }, ball.state.duration, animate_ball );
}
animate_ball();


// Called when Mouse Movies
var publish_updater = updater( function() {
    PUBNUB.publish({
        'channel' : channel,
        'message' : {
            'action'   : 'player_state',
            'pointers' : current_player.pointers,
            'uuid'     : current_player.uuid
        }
    });
}, wait );


// Update Mouse Pointer (could be multiple pointers)
function update_pointer(e) {
    var pointers = current_player.pointers = mouse(e);
    //console.log(pointers);

    each( pointers, function(pointer) {
        // Test for Collision Here
        // TODO
        /*
            if collision, send publish event.
        */

        // Send Latest Information
        publish_updater();
    } );
}


// Called when new Ball State ARIVES
function update_ball(ball_state) {
}


// Called when new Player State ARIVES
function update_player(player_state) {
    /*
        -check if player exsists,
            -if not then add player to players obj
        -draw
    */
}


// Temp!!!!!!!!!!!
// Temp!!!!!!!!!!!
// Temp!!!!!!!!!!!
console.log('current_player: ', current_player);
// Temp!!!!!!!!!!!
// Temp!!!!!!!!!!!
// Temp!!!!!!!!!!!


// Listen for Game Messages
PUB.subscribe( { 'channel' : channel }, function(message) {

    console.log('message: ' + JSON.stringify(message));

    switch (message['action']) {
        case 'ball_state' :
            update_ball(message);
            break;

        case 'player_state' :
            update_player(message);
            break;
    }
} );

// Set Browser to Gaming Mode
each(
    'mousedown,mousemove,touchmove,touchstart,touchend,selectstart'.split(','),
    function(ename) { bind( ename, document, update_pointer ) }
);

})()</script>
